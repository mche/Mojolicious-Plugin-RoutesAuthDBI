=encoding utf8

Доброго всем

¡ ¡ ¡ ALL GLORY TO GLORIA ! ! !

=head1 NAME

Mojolicious::Plugin::RoutesAuthDBI - Generate routes from sql-table and make restrict access to them with users/roles tables. Plugin makes an auth operations with cookies and does check access to the route.

=head1 SYNOPSIS

    # at sub startup
    # after config
    
    $app->plugin(RoutesAuthDBI,  dbh => $app->dbh->{main}, auth => {...}, ...);
    # or
    $app->plugin(RoutesAuthDBI); # will try apply options from $app->config('RoutesAuthDBI')

=head2 OPTIONS

=over 4

=item * B<dbh> - DBI connection where are tables: routes, users, roles, refs.

=item * B<auth> - hashref with options of L<Mojolicious::Plugin::Authentication>

=item * B<load_roles> - an SQL-string for select of all roles of current user. The helper B<roles> can retrivie roles as DBI selectall_hashref.

=item * B<


=head3 Warning

If you change the routes table then kill -HUP or reload app to regenerate routes.


=head1 DESCRIPTION

=head2 SQL schema

    route -> role -> user

=over 4

=item * Pg sequence for column id on all tables

    create sequence ID;

=item * Table of routes

    create table routes(
        id int default nextval('ID'::regclass) not null  primary key,
        request varchar not null unique,
        controller varchar not null,
        action varchar not null,
        name varchar not null unique,
        descr text null,
        auth bit null,
        disable bit null
    );

=item * Table of users

    create table users(
        id int default nextval('ID'::regclass) not null  primary key,
        login varchar not null,
        pass varchar not null
    );

=item * Table of users roles

    create table roles(
        id int default nextval('ID'::regclass) not null  primary key,
        name varchar not null
    );

=item * Table of references between routes, users and roles

    create table refs(
        id int default nextval('ID'::regclass) not null  primary key,
        id1 int not null,
        id2 int not null
    );

where:
	id1 - primary id,
	id2 - secondary id
of reference

=back

=head2 Example routing table records

    test=# select * from routes ;
     id |      request       | controller | action  |    name    | descr | auth | disable 
    ----+--------------------+------------+---------+------------+-------+------+---------
      2 | /                  | Main       | index   | home       |       | 0    | 
      3 | /sign/:login/:pass | Main       | sign    | sign in&up |       | 0    | 
      5 | /signout           | Main       | signout | go away    |       | 1    | 



    Request
    HTTP method(s) (optional)
    and the URL (space delim)
                               Contoller    Method          Route Name        Auth
    -------------------------  -----------  --------------  ----------------- -----
    GET /city/new              City         new_form        city_new_form     1
    GET /city/:id              City         show            city_show         1
    GET /city/edit/:id         City         edit_form       city_edit_form    1
    GET /cities                City         index           city_index        1
    POST /city                 City         save            city_save         1
    GET /city/delete/:id       City         delete_form     city_delete_form  1
    DELETE /city/:id           City         delete          city_delete       1
    /                          Home         index           home_index        0
    get post /foo/baz          Foo          baz             foo_baz           1

It table will generate the L<Mojolicious routes|http://mojolicious.org/perldoc/Mojolicious/Guides/Routing>:

    # GET /city/new 
    $r->route('/city/new')->via('get')->over(<auth>)->to(controller => 'city', action => 'new_form')->name('city_new_form');

    # GET /city/123 - show item with id 123
    $r->route('/city/:id')->via('get')->over(<auth>)->to(controller => 'city', action => 'show')->name('city_show');

    # GET /city/edit/123 - form to edit an item
    $r->route('/city/edit/:id')->via('get')->over(<auth>)->to(controller => 'city', action => 'edit_form')->name('city_edit_form');

    # GET /cities - list of all items
    $r->route('/cities')->via('get')->over(<auth>)->to(controller => 'city', action => 'index')->name('cities_index');

    # POST /city - create new item or update the item
    $r->route('/city')->via('post')->to(controller => 'city', action => 'save')->name('city_save');
    
    # GET /city/delete/123 - form to confirm delete an item id=123
    $r->route('/city/delete/:id')->via('get')->over(<auth>)->to(controller => 'city', action => 'delete_form')->name('city_delete_form');

    # DELETE /city/123 - delete an item id=123
    $r->route('/city/:id')->via('delete')->over(<auth>)->to(controller => 'city', action => 'delete')->name('city_delete');
        
    # without HTTP method and no auth restrict
    $r->route('/')->to(controller => 'Home', action => 'index')->name('home_index');
        
    # GET or POST /foo/baz 
    $r->route('/foo/baz')->via('GET', 'post')->over(<auth>)->to(controller => 'Foo', action => 'baz')->name('foo_baz');

=head1 SEE ALSO

L<Mojolicious::Plugin::Authentication>, L<Mojolicious::Plugin::Authorization>

=head1 AUTHOR

Михаил Че (Mikhail Che), C<< <mche [] cpan.org> >>


=head1 COPYRIGHT

Copyright 2016 Mikhail Che.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

